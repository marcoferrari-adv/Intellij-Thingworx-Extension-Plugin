name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      # Free GitHub Actions Environment Disk Space
      - name: Maximize Build Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          
      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: corretto
          java-version: 17
          
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
        
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
            gradle-version: 7.5

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.6

      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          echo $PROPERTIES
          
      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Build tasks
        run: ./gradlew buildPlugin

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content
          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT
      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  releaseDraft:
      name: Release Draft
      if: github.event_name != 'pull_request'
      needs: build
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:
  
        # Check out current repository
        - name: Fetch Sources
          uses: actions/checkout@v3
  
        # Remove old release drafts by using the curl request for the available releases with a draft flag
        - name: Remove Old Release Drafts
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            gh api repos/{owner}/{repo}/releases \
              --jq '.[] | select(.draft == true) | .id' \
              | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
        # Create a new release draft which is not publicly visible and requires manual acceptance
        - name: Create Release Draft
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            gh release create v${{ needs.build.outputs.version }} \
              --draft \
              --title "v${{ needs.build.outputs.version }}" \
              --notes "$(cat << 'EOM'
            ${{ needs.build.outputs.changelog }}
            EOM
            )"
